from algRealEmbeddings import *
#import time
from random import uniform
import copy

v2, v3, v1 = [0, -2.3418234786589167, 0], [0, 6.327508996139455, 0], [3.697464444401205, 0.017900844941222793, 0]
v4 = [3.2930168732119, -0.157944798200452, -1.95429223125632]
v5 = [2.82039958291193, 0.679610905369317, -1.67465679235168]
v6 = [2.47296030555702, 0.342686069384568, -1.46758104891375]
v7 = [-2.63035589169772, 0, -10.6657888907962]
v8 = [1.0, 1.0, 1.0]
a = -0.1
b = 0.1

#v1 = [uniform(a, b), uniform(a, b), uniform(a, b)]
#v7 = [uniform(a, b), uniform(a, b), uniform(a, b)]
#
#v2 = [1.0+uniform(a, b), uniform(a, b), uniform(a, b)]
#v5 = [1.0+uniform(a, b), uniform(a, b), uniform(a, b)]
#
#v3 = [uniform(a, b), 1.0+uniform(a, b), uniform(a, b)]
#
#v6 = [uniform(a, b), uniform(a, b), 1.0+uniform(a, b)]
#
#v4 = [1.0+uniform(a, b), 1.0+uniform(a, b), uniform(a, b)]
#
#v8 = [ 1.0 + uniform(a, b),uniform(a, b), 1.0+uniform(a, b)]


#v1 = [uniform(a, b), 1.0 + uniform(a, b), uniform(a, b)]
#v8 = [uniform(a, b), 1.0 + uniform(a, b), uniform(a, b)]

#v4 = [-1.0+uniform(a, b), uniform(a, b), uniform(a, b)]
#v2 = [-1.0+uniform(a, b), uniform(a, b), uniform(a, b)]

#v3 = [1.0+uniform(a, b), uniform(a, b), uniform(a, b)]
#v5 = [1.0+uniform(a, b), uniform(a, b), uniform(a, b)]

#v6 = [uniform(a, b), 0.5 + uniform(a, b), 1.0+uniform(a, b)]

#v7 = [uniform(a, b), 0.5 + uniform(a, b), -1.0+uniform(a, b)]

def dist( u, v):
    return float(np.sqrt( (u[0]-v[0])**2 + (u[1]-v[1])**2 + (u[2]-v[2])**2))

lengths = {
           (2, 1) : dist(v2,v1),
            (2, 7) : dist(v2,v7),
            (2, 6) : dist(v2,v6),
            (3, 1) : dist(v3,v1),
            (3, 7) : dist(v3,v7),
            (3, 2) : dist(v3,v2),
            (4, 1) : dist(v4,v1),
            (4, 7) : dist(v4,v7),
            (4, 3) : dist(v4,v3),
            (5, 1) : dist(v5,v1),
            (5, 7) : dist(v5,v7),
            (5, 4) : dist(v5,v4),
            (6, 1) : dist(v6,v1),
            (6, 5) : dist(v6,v5),
            (5, 8) : dist(v5,v8),
            (6, 8) : dist(v6,v8),
            (7, 8) : dist(v7,v8),
            (2, 8) : dist(v2,v8),
           }

#lengths = {(1, 2): 4.386290254987835, (4, 7): 10.5579448289947, (2, 6): 2.1695833997369136, (4, 5): 1.6940062148563753, (2, 8): 16.83405853179157,
#           (1, 4): 1.8084396572052768, (1, 3): 11.026883517351973, (1, 6): 5.8450130495737325, (3, 7): 13.787489684821617, (5, 8): 13.075209742298672, 
#           (2, 7): 11.232184203671995, (6, 8): 18.368267879186273, (1, 5): 2.00289249524296, (7, 8): 18.762183274653285, (5, 7): 10.536273659997796, 
#           (5, 6): 5.918182159410676, (2, 3): 11.29840753979362, (3, 4): 10.81796534240893}
#start = time.time()
#G = GraphEmbedding(lengths, 'Max8vertices')
#sols = G.findEmbeddings()
#print len(sols['real'])
#print len(sols['complex'])
#end = time.time()
#print 'Time: ' , end - start

#lengths = {(1, 2): 3.2154982220265746, (4, 7): 17.87967729573084, (2, 6): 1.0237800945583875, (4, 5): 17.84906203635929, (2, 8): 1.0222718473388588, 
#           (1, 4): 18.1376750081305, (1, 3): 9.972794388417462, (1, 6): 3.032569805432945, (3, 7): 9.215048223037243, (5, 8): 0.09782324287506733,
#           (2, 7): 1.436434819135262, (6, 8): 0.044659851199770367, (1, 5): 3.032338165266229, (3, 4): 19.765613007713764, (5, 7): 1.0123496857434562, 
#           (5, 6): 0.09495461781471154, (2, 3): 8.476438875510395, (7, 8): 1.0091111235946963}
#
#lengths = {(1, 2): 3.2154982220265746, (2, 7): 1.436434819135262, (4, 7): 17.87967729573084, (2, 6): 1.0237800945583875, (6, 8): 0.04465985119977037, 
#           (4, 5): 17.84906203635929, (2, 8): 1.0222718473388588, (5, 7): 1.0123496857434562, (7, 8): 1.0091111235946963, (1, 4): 18.1376750081305,
#           (1, 5): 3.032338165266229, (1, 3): 9.972794388417462, (1, 6): 3.032569805432945, (5, 6): 0.09495461781471154, (3, 7): 9.215048223037243, 
#           (3, 4): 19.765613007713764, (2, 3): 8.476438875510395, (5, 8): 0.09782324287506733}
           

lengths = {(2, 7): 1.4288466263977495, (4, 7): 3.646175820991137, (2, 6): 1.0238654856293283, (4, 5): 3.3429830998046732, (2, 8): 1.0229346087847153, 
           (1, 4): 4.49321454664234, (1, 3): 12.291475166368201, (1, 6): 3.027506184926906, (3, 7): 12.213160380343274, (5, 8): 0.09529692624044482, 
           (1, 2): 3.214648729657953, (6, 8): 0.0179005231972465, (1, 5): 3.032338165266229, (3, 4): 10.92113783226037, (5, 7): 1.0123496857434562, 
           (5, 6): 0.0949979939254927, (2, 3): 11.53333847125022, (7, 8): 1.0019027335371273}

           
alg = AlgRealEmbeddings('Max8vertices', name='8vert')
#alg.findMoreEmbeddings(lengths)

#start = time.time()
#G = GraphEmbedding(lengths, 'Max8vertices')
#sols = G.findEmbeddings()
#print len(sols['real'])
#print len(sols['complex'])
#end = time.time()
#print 'Time: ' , end - start



#
#n_L = {}
#for e in lengths:
#    print e,  lengths[e]
#    m,  Ls = alg.sampleEdge(lengths, e, 50)
#    print m,  Ls
#    n_L[e] = [m, Ls]
##    if Ls:
##        new_lengths[e] = sum(Ls)/float(len(Ls))
#
#print n_L

n_L = {(2, 7): [120, [1.3752646655538825, 1.3850942655823375, 1.3949238656107925, 1.4047534656392475, 1.4145830656677025, 1.4244126656961575, 1.4342422657246126]], (1, 2): [120, [3.2133998708749894, 3.2232294709034446, 3.2330590709319]], (4, 7): [120, [3.616413472041654, 3.626243072070109, 3.6360726720985643, 3.6459022721270196, 3.655731872155475, 3.66556147218393, 3.6753910722123853]], (2, 6): [0, []], (6, 8): [120, [0.018779861627078433]], (4, 5): [120, [3.321525471187997, 3.331355071216452, 3.3411846712449074, 3.3510142712733626, 3.360843871301818]], (2, 8): [0, []], (5, 7): [124, [1.0017398644725897]], (3, 4): [120, [10.693725492529333, 10.703555092557789, 10.713384692586244, 10.7232142926147, 10.733043892643154, 10.74287349267161, 10.752703092700065, 10.76253269272852, 10.772362292756975, 10.78219189278543, 10.792021492813886, 10.801851092842341, 10.811680692870796, 10.821510292899251, 10.831339892927707, 10.841169492956162, 10.850999092984617, 10.860828693013072, 10.870658293041528, 10.880487893069983, 10.890317493098438, 10.900147093126893, 10.909976693155349, 10.919806293183804, 10.929635893212259, 10.939465493240714, 10.94929509326917, 10.959124693297625, 10.96895429332608, 10.978783893354535, 10.98861349338299, 10.998443093411446, 11.008272693439901, 11.018102293468356, 11.027931893496811, 11.037761493525267, 11.047591093553722, 11.057420693582177, 11.067250293610632, 11.067250293610627, 11.077079893639082, 11.086909493667537, 11.096739093695993, 11.106568693724448, 11.116398293752903, 11.126227893781358, 11.136057493809814, 11.145887093838269, 11.155716693866724]], (1, 4): [120, [4.42244067437497, 4.432270274403425, 4.4420998744318805, 4.451929474460336, 4.461759074488791, 4.471588674517246, 4.481418274545701, 4.491247874574157, 4.501077474602612, 4.510907074631067, 4.520736674659522, 4.530566274687978, 4.540395874716433, 4.550225474744888, 4.560055074773343, 4.5698846748017985, 4.579714274830254]], (1, 5): [112, [3.026637470334346]], (1, 3): [120, [12.060039896484595, 12.06986949651305, 12.079699096541505, 12.08952869656996, 12.099358296598416, 12.109187896626871, 12.119017496655326, 12.128847096683781, 12.138676696712237, 12.148506296740692, 12.158335896769147, 12.168165496797602, 12.177995096826058, 12.187824696854513, 12.197654296882968, 12.207483896911423, 12.217313496939878, 12.227143096968334, 12.236972696996789, 12.246802297025244, 12.2566318970537, 12.266461497082155, 12.27629109711061, 12.286120697139065, 12.29595029716752, 12.305779897195976, 12.31560949722443, 12.325439097252886, 12.335268697281341, 12.345098297309796, 12.354927897338252, 12.364757497366707, 12.374587097395162, 12.384416697423617, 12.394246297452073, 12.404075897480528, 12.413905497508983, 12.423735097537438, 12.433564697565894, 12.443394297594349, 12.453223897622804, 12.46305349765126]], (1, 6): [116, [3.026637470334346]], (5, 6): [0, []], (3, 7): [120, [12.168165496797602, 12.177995096826058, 12.187824696854513, 12.197654296882968, 12.207483896911423, 12.217313496939878, 12.227143096968334, 12.236972696996789, 12.246802297025244, 12.2566318970537, 12.266461497082155]], (7, 8): [120, [1.0017398644725897, 1.0115694645010447]], (2, 3): [120, [11.450604694720381, 11.460434294748836, 11.470263894777291, 11.480093494805747, 11.489923094834202, 11.499752694862657, 11.509582294891112, 11.519411894919568, 11.529241494948023, 11.539071094976478, 11.548900695004933, 11.558730295033389, 11.558730295033383, 11.568559895061838, 11.578389495090294, 11.588219095118749, 11.598048695147204]], (5, 8): [0, []]}

new_lengths = copy.copy(lengths)
for e in lengths:
#    print e,  lengths[e]
    m,  Ls = n_L[e]
#    print m,  Ls
    if Ls and m== 120:
        new_lengths[e] = sum(Ls)/float(len(Ls))
#        if abs(min(Ls)-lengths[e])<abs(max(Ls)-lengths[e]):
#            new_lengths[e] = min(Ls)
#        else:
#            new_lengths[e] = max(Ls)


G = GraphEmbedding(new_lengths, 'Max8vertices')
sols = G.findEmbeddings()
print 'Embeddings after resampling:'
print len(sols['real'])
print new_lengths
#print len(sols['complex'])

#   
#
#alg = AlgRealEmbeddings('Max8vertices', name='8vertAfterResampling')
#alg.findMoreEmbeddings(new_lengths)










