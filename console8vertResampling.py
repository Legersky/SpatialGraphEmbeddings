from algRealEmbeddings import *
#import time
from random import uniform
import copy

#lengths = {(1, 2): 4.386290254987835, (4, 7): 10.5579448289947, (2, 6): 2.1695833997369136, (4, 5): 1.6940062148563753, (2, 8): 16.83405853179157,
#           (1, 4): 1.8084396572052768, (1, 3): 11.026883517351973, (1, 6): 5.8450130495737325, (3, 7): 13.787489684821617, (5, 8): 13.075209742298672, 
#           (2, 7): 11.232184203671995, (6, 8): 18.368267879186273, (1, 5): 2.00289249524296, (7, 8): 18.762183274653285, (5, 7): 10.536273659997796, 
#           (5, 6): 5.918182159410676, (2, 3): 11.29840753979362, (3, 4): 10.81796534240893}
#start = time.time()
#G = GraphEmbedding(lengths, 'Max8vertices')
#sols = G.findEmbeddings()
#print len(sols['real'])
#print len(sols['complex'])
#end = time.time()
#print 'Time: ' , end - start

#lengths = {(1, 2): 3.2154982220265746, (4, 7): 17.87967729573084, (2, 6): 1.0237800945583875, (4, 5): 17.84906203635929, (2, 8): 1.0222718473388588, 
#           (1, 4): 18.1376750081305, (1, 3): 9.972794388417462, (1, 6): 3.032569805432945, (3, 7): 9.215048223037243, (5, 8): 0.09782324287506733,
#           (2, 7): 1.436434819135262, (6, 8): 0.044659851199770367, (1, 5): 3.032338165266229, (3, 4): 19.765613007713764, (5, 7): 1.0123496857434562, 
#           (5, 6): 0.09495461781471154, (2, 3): 8.476438875510395, (7, 8): 1.0091111235946963}
#
#lengths = {(1, 2): 3.2154982220265746, (2, 7): 1.436434819135262, (4, 7): 17.87967729573084, (2, 6): 1.0237800945583875, (6, 8): 0.04465985119977037, 
#           (4, 5): 17.84906203635929, (2, 8): 1.0222718473388588, (5, 7): 1.0123496857434562, (7, 8): 1.0091111235946963, (1, 4): 18.1376750081305,
#           (1, 5): 3.032338165266229, (1, 3): 9.972794388417462, (1, 6): 3.032569805432945, (5, 6): 0.09495461781471154, (3, 7): 9.215048223037243, 
#           (3, 4): 19.765613007713764, (2, 3): 8.476438875510395, (5, 8): 0.09782324287506733}
           
#
#lengths = {(2, 7): 1.4288466263977495, (4, 7): 3.646175820991137, (2, 6): 1.0238654856293283, (4, 5): 3.3429830998046732, (2, 8): 1.0229346087847153, 
#           (1, 4): 4.49321454664234, (1, 3): 12.291475166368201, (1, 6): 3.027506184926906, (3, 7): 12.213160380343274, (5, 8): 0.09529692624044482, 
#           (1, 2): 3.214648729657953, (6, 8): 0.0179005231972465, (1, 5): 3.032338165266229, (3, 4): 10.92113783226037, (5, 7): 1.0123496857434562, 
#           (5, 6): 0.0949979939254927, (2, 3): 11.53333847125022, (7, 8): 1.0019027335371273}

lengths = {(1, 2): 3.2232294709034446, (4, 7): 3.8174034354261854, (2, 6): 1.023865485629374, (4, 5): 3.4734613814676014, (2, 8): 1.0229346087848081, 
           (1, 4): 4.514497903614439, (1, 3): 30.917431458441378, (1, 6): 3.0275061849268874, (3, 7): 31.199937656313235, (5, 8): 0.09529692623985034, 
           (2, 7): 1.4047534656392475, (6, 8): 0.018779861626871987, (1, 5): 3.032338165266229, (7, 8): 1.0066546644867307, (5, 7): 1.0123496857434562, 
           (5, 6): 0.0949979939274194, (2, 3): 30.484198141245734, (3, 4): 29.641400362571787}
           
alg = AlgRealEmbeddings('Max8vertices', name='8vert')
#alg.findMoreEmbeddings(lengths)

#start = time.time()
#G = GraphEmbedding(lengths, 'Max8vertices')
#sols = G.findEmbeddings()
#print len(sols['real'])
#print len(sols['complex'])
#end = time.time()
#print 'Time: ' , end - start




#n_L = {}
#for e in lengths:
#    print e,  lengths[e]
#    m,  Ls = alg.sampleEdge(lengths, e, 50)
#    print m,  Ls
#    n_L[e] = [m, Ls]
#
#print n_L

n_L = {(1, 2): [124, [3.203782782362264, 3.2287389765149896, 3.253695170667715]], (2, 7): [124, [1.3819806092133227, 1.4069368033660479]],
    (4, 7): [124, [3.8027314420276745, 3.8276876361804]], (2, 6): [0, []], (6, 8): [112, [0.03434612496616109]], 
    (4, 5): [124, [3.4533447238895185, 3.478300918042244, 3.5032571121949694]], (2, 8): [0, []], (5, 7): [0, []],
    (1, 4): [124, [4.401680101693074, 4.4266362958458, 4.451592489998525, 4.4765486841512505, 4.501504878303976, 4.526461072456701, 4.551417266609427]], 
    (1, 5): [0, []], 
    (1, 3): [124, [30.805333515276356, 30.83028970942908, 30.855245903581807, 30.880202097734532, 30.905158291887258, 30.930114486039983, 
                   30.95507068019271, 30.980026874345434, 31.00498306849816, 31.029939262650885, 31.05489545680361, 31.079851650956336, 31.10480784510906]], 
    (1, 6): [0, []], (5, 8): [0, []], (5, 6): [0, []], (3, 7): [124, [31.154720233414512, 31.179676427567237, 31.204632621719963, 31.229588815872688]],
    (3, 4): [124, [29.283005671960126, 29.30796186611285, 29.332918060265577, 29.332918060265566, 29.35787425441829, 29.382830448571017, 29.407786642723742, 
                   29.432742836876468, 29.457699031029193, 29.48265522518192, 29.507611419334644, 29.53256761348737, 29.557523807640095, 29.58248000179282, 
                   29.607436195945546, 29.63239239009827, 29.657348584250997, 29.682304778403722, 29.707260972556448, 29.732217166709173, 29.7571733608619,
                   29.782129555014624, 29.80708574916735, 29.832041943320075, 29.8569981374728]], (2, 3): [112, [30.580727767901827]], (7, 8): [0, []]}

new_lengths = copy.copy(lengths)
for e in lengths:
#    print e,  lengths[e]
    m,  Ls = n_L[e]
#    print m,  Ls
    if Ls and m== 124:
        new_lengths[e] = sum(Ls)/float(len(Ls))
#        if abs(min(Ls)-lengths[e])<abs(max(Ls)-lengths[e]):
#            new_lengths[e] = min(Ls)
#        else:
#            new_lengths[e] = max(Ls)


G = GraphEmbedding(new_lengths, 'Max8vertices')
sols = G.findEmbeddings()
print 'Embeddings after resampling:'
print len(sols['real'])
print new_lengths
print len(sols['complex'])

   

alg = AlgRealEmbeddings('Max8vertices', num_phi=36, num_theta=36, factor_second=4, name='8vertTripleResampling')
alg.findMoreEmbeddings(new_lengths)










