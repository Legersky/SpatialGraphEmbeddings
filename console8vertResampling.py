from algRealEmbeddings import *
#import time
from random import uniform
import copy

#lengths = {(1, 2): 4.386290254987835, (4, 7): 10.5579448289947, (2, 6): 2.1695833997369136, (4, 5): 1.6940062148563753, (2, 8): 16.83405853179157,
#           (1, 4): 1.8084396572052768, (1, 3): 11.026883517351973, (1, 6): 5.8450130495737325, (3, 7): 13.787489684821617, (5, 8): 13.075209742298672, 
#           (2, 7): 11.232184203671995, (6, 8): 18.368267879186273, (1, 5): 2.00289249524296, (7, 8): 18.762183274653285, (5, 7): 10.536273659997796, 
#           (5, 6): 5.918182159410676, (2, 3): 11.29840753979362, (3, 4): 10.81796534240893}
#start = time.time()
#G = GraphEmbedding(lengths, 'Max8vertices')
#sols = G.findEmbeddings()
#print len(sols['real'])
#print len(sols['complex'])
#end = time.time()
#print 'Time: ' , end - start

#lengths = {(1, 2): 3.2154982220265746, (4, 7): 17.87967729573084, (2, 6): 1.0237800945583875, (4, 5): 17.84906203635929, (2, 8): 1.0222718473388588, 
#           (1, 4): 18.1376750081305, (1, 3): 9.972794388417462, (1, 6): 3.032569805432945, (3, 7): 9.215048223037243, (5, 8): 0.09782324287506733,
#           (2, 7): 1.436434819135262, (6, 8): 0.044659851199770367, (1, 5): 3.032338165266229, (3, 4): 19.765613007713764, (5, 7): 1.0123496857434562, 
#           (5, 6): 0.09495461781471154, (2, 3): 8.476438875510395, (7, 8): 1.0091111235946963}
#
#lengths = {(1, 2): 3.2154982220265746, (2, 7): 1.436434819135262, (4, 7): 17.87967729573084, (2, 6): 1.0237800945583875, (6, 8): 0.04465985119977037, 
#           (4, 5): 17.84906203635929, (2, 8): 1.0222718473388588, (5, 7): 1.0123496857434562, (7, 8): 1.0091111235946963, (1, 4): 18.1376750081305,
#           (1, 5): 3.032338165266229, (1, 3): 9.972794388417462, (1, 6): 3.032569805432945, (5, 6): 0.09495461781471154, (3, 7): 9.215048223037243, 
#           (3, 4): 19.765613007713764, (2, 3): 8.476438875510395, (5, 8): 0.09782324287506733}
           
#
#lengths = {(2, 7): 1.4288466263977495, (4, 7): 3.646175820991137, (2, 6): 1.0238654856293283, (4, 5): 3.3429830998046732, (2, 8): 1.0229346087847153, 
#           (1, 4): 4.49321454664234, (1, 3): 12.291475166368201, (1, 6): 3.027506184926906, (3, 7): 12.213160380343274, (5, 8): 0.09529692624044482, 
#           (1, 2): 3.214648729657953, (6, 8): 0.0179005231972465, (1, 5): 3.032338165266229, (3, 4): 10.92113783226037, (5, 7): 1.0123496857434562, 
#           (5, 6): 0.0949979939254927, (2, 3): 11.53333847125022, (7, 8): 1.0019027335371273}

#lengths = {(1, 2): 3.2232294709034446, (4, 7): 3.8174034354261854, (2, 6): 1.023865485629374, (4, 5): 3.4734613814676014, (2, 8): 1.0229346087848081, 
#           (1, 4): 4.514497903614439, (1, 3): 30.917431458441378, (1, 6): 3.0275061849268874, (3, 7): 31.199937656313235, (5, 8): 0.09529692623985034, 
#           (2, 7): 1.4047534656392475, (6, 8): 0.018779861626871987, (1, 5): 3.032338165266229, (7, 8): 1.0066546644867307, (5, 7): 1.0123496857434562, 
#           (5, 6): 0.0949979939274194, (2, 3): 30.484198141245734, (3, 4): 29.641400362571787}
           
lengths = {(1, 2): 3.2154982220265746, (4, 7): 5.053527539977335, (2, 6): 1.02378009455854, (4, 5): 4.800214122065802, (2, 8): 1.0207343645750873, 
           (1, 4): 5.839343839684607, (1, 3): 17.34824511257986, (1, 6): 3.0325698054328925, (3, 7): 17.046803669779802, (5, 8): 0.09532453043842402, 
           (2, 7): 1.4364348191352618, (6, 8): 0.029435880884050927, (1, 5): 3.03233816526623, (7, 8): 1.0093055344717898, (5, 7): 1.0123496857434564, 
           (5, 6): 0.09495461781545128, (2, 3): 16.40919471947341, (3, 4): 15.288586780382227}

alg = AlgRealEmbeddings('Max8vertices', name='8vert')
#alg.findMoreEmbeddings(lengths)

#start = time.time()
#G = GraphEmbedding(lengths, 'Max8vertices')
#sols = G.findEmbeddings()
#print len(sols['real'])
#print len(sols['complex'])
#end = time.time()
#print 'Time: ' , end - start


#n_L = {}
#for e in lengths:
#    print e,  lengths[e]
#    m,  Ls = alg.sampleEdge(lengths, e, 50)
#    print m,  Ls
#    n_L[e] = [m, Ls]
#
#print n_L

n_L = {(1, 2): [112, [3.2054409906360544, 3.2193136995499416]], (2, 7): [112, [1.401988831830732, 1.4158615407446191, 1.4297342496585062, 1.4436069585723932]],
(4, 7): [112, [5.050511276183025, 5.064383985096912]], (2, 6): [0, []], (6, 8): [112, [0.028590649355912674]], (4, 5): [112, [4.8008025157330625, 4.814675224646949]],
(2, 8): [0, []], (5, 7): [0, []], (1, 4): [116, [5.882873811016246]],
(1, 5): [0, []], (1, 3): [112, [17.25849512040367, 17.272367829317556, 17.286240538231443, 17.30011324714533, 17.313985956059216, 17.327858664973103, 
                                17.34173137388699, 17.355604082800877, 17.369476791714764, 17.38334950062865, 17.397222209542537, 17.411094918456424, 
                                17.42496762737031, 17.438840336284198, 17.452713045198085, 17.46658575411197]], (1, 6): [0, []], (5, 8): [0, []], 
                                (5, 6): [0, []], (3, 7): [112, [17.022659068867593, 17.03653177778148, 17.050404486695367, 17.064277195609254, 17.07814990452314]],
                                (3, 4): [112, [15.094352529837284, 15.10822523875117, 15.122097947665058, 15.135970656578944, 15.149843365492831, 15.163716074406718,
                                                15.177588783320605, 15.191461492234492, 15.205334201148379, 15.219206910062265, 15.233079618976152, 15.246952327890039,
                                                15.260825036803926, 15.274697745717813, 15.2885704546317, 15.302443163545586, 15.316315872459473, 15.33018858137336, 
                                                15.344061290287247, 15.357933999201133, 15.37180670811502, 15.385679417028907, 15.399552125942794, 15.41342483485668]],
                                                (2, 3): [112, [16.356769041001012, 16.3706417499149, 16.384514458828786, 16.398387167742673, 16.41225987665656, 16.426132585570446]],
                                                (7, 8): [0, []]}

new_lengths = copy.copy(lengths)
for e in lengths:
#    print e,  lengths[e]
    m,  Ls = n_L[e]
#    print m,  Ls
    if Ls and m== 112:
        new_lengths[e] = sum(Ls)/float(len(Ls))
#        if abs(min(Ls)-lengths[e])<abs(max(Ls)-lengths[e]):
#            new_lengths[e] = min(Ls)
#        else:
#            new_lengths[e] = max(Ls)


G = GraphEmbedding(new_lengths, 'Max8vertices_distSyst')
sols = G.findEmbeddings()
print 'Embeddings after resampling:'
print len(sols['real'])
print new_lengths
print len(sols['complex'])

   

alg = AlgRealEmbeddings('Max8vertices_distSyst', name='8vert_Resampling_of_122_DIST')#, num_phi=36, num_theta=36, factor_second=4
alg.findMoreEmbeddings(new_lengths)










